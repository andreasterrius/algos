#include <iostream>
#include <vector>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <climits>
#include <cmath>
#include <algorithm>
#include <stack>
#include <string>

using namespace std;

typedef long long ll;
#define debuglist(x) for(int i = 0; i < x.size(); ++i) { cout << x[i] << " "; } cout << "\n";
#define MODL 1000000007

/*
* Accepted
BinarySearch - Largest Square Submatrix
Find the largest square of 1 from given vec<vec<int>>

DP after first row, first column
dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])

why need dp[i-1][j-1], idk, but is wrong without it

*/

int solve(vector<vector<int>>& matrix) {
    int area = 0;
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = 0; j < matrix[i].size(); ++j) {
            if (i == 0 || j == 0) {
                area = max(area, matrix[i][j]);
                continue;
            }
            if (matrix[i][j] == 0) continue;
            matrix[i][j] = min(matrix[i-1][j-1], min(matrix[i - 1][j], matrix[i][j - 1])) + 1;
            area = max(area, matrix[i][j]);
        }
    }
    
    return area*area;
}

int main() {

    /*int t, p;
    cin >> t >> p;
    for (int i = 0; i < t; ++i) {
        solve(i+1);
    }*/

    /*vector<vector<int>> d{
        {0, 0, 0, 0, 0, 1, 1},
        {0, 0, 0, 0, 0, 1, 1},
        {1, 1, 1, 1, 0, 0, 0},
        {1, 1, 1, 1, 0, 0, 0},
        {1, 1, 1, 1, 0, 0, 0},
        {1, 1, 1, 1, 0, 0, 0}
    };*/

    vector<vector<int>> d{{1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1},{1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0},{1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,0},{1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0},{1,0,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1},{1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,1},{1,0,1,1,1,1,0,0,0,1,1,1,1,0,1,0,1},{1,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1},{1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1},{1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1}};

    // vector<vector<int>> d{
    //    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0},
    //    {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0},
    //    {0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
    //    {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1},
    //    {0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1}
    //};

    //vector<vector<int>> d = {
    //    //{1, 0, 1},
    //    //{1, 0, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 0, 1},
    //    //{0, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 0},
    //    //{1, 1, 1},
    //    //{0, 1, 1},
    //    //{1, 1, 1},
    //    //{0, 0, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 0},
    //    //{0, 1, 1},
    //    //{1, 0, 1},
    //    //{1, 1, 1},
    //    //{0, 1, 0},
    //    //{0, 1, 1},
    //    //{0, 1, 1},
    //    //{0, 1, 0},
    //    //{0, 1, 1},
    //    //{1, 1, 0},
    //    //{1, 1, 1},
    //    //{1, 0, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 0, 0},
    //    //{1, 1, 1},
    //    //{0, 1, 1},
    //    //{0, 1, 0},
    //    //{1, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 0},
    //    //{0, 1, 1},
    //    //{1, 0, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 1, 1},
    //    //{0, 1, 1},
    //    //{1, 1, 1},
    //    //{1, 0, 1},
    //    //{1, 1, 0}
    //};

    cout << solve(d);

    return 0;
}